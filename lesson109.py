import prettytable
import pdfkit
import htmlmin
import os
import datetime
import argparse
import csv

MYSTYLE = ""
real_path = os.path.dirname(os.path.realpath(__file__))
print(real_path)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(r"C:\Users\Alex\Python228\data.csv", help="full path to the csv file.")
    parser.add_argument(r"C:\Users\Alex\Python228\data.pdf", help="full output path to the pdf file.")

    args = parser.parse_args()
    if not args.csv_path.lower().endswith("csv"):
        print("Invalid input file. Ensure the file is csv format.")
        return 1

    if not args.output_path.lower().endswith("pdf"):
        print("Invalid output file. Ensure the file is pdf format.")
        return 1
    with open(os.path.join(real_path, 'mystyle.css'), 'r') as f:
        MYSTYLE = f.read()

    current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
    data = []
    with open(args.csv_path, 'r') as f:
        reader = csv.reader(f)
        for row in reader:
            data.append(row)
    unique_headers = {}
    headers = data[0]
    for i, h in enumerate(headers):
        if h not in unique_headers:
            unique_headers[h] = 1
            continue
        headers[i] = headers[i] + str(unique_headers[h])
        unique_headers[h] += 1
    cols = len(headers)
    df = prettytable.PrettyTable(headers)
    for i, row in enumerate(data):
        if i == 0: continue
        df.add_row(row)
    html = htmlmin.minify(
        "<style>{}</style><p>Report generated at : {}</p>{}<p>Report generated by Accops Reporting Server.</p>". \
        format(MYSTYLE, current_time, df.get_html_string(attributes={'class': 'mystyle'})))
    pdfkit.from_string(html, args.output_path, options={"quiet": ""})
    return 0


if __name__ == '__main__':
    main()



